services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: piston-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: piston_control
      POSTGRES_USER: piston_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - piston-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U piston_user -d piston_control"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Mosquitto MQTT Broker
  mosquitto:
    image: eclipse-mosquitto:2.0.18
    container_name: piston-mosquitto
    restart: unless-stopped
    volumes:
      - ./mosquitto/config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mosquitto/data:/mosquitto/data
      - ./mosquitto/log:/mosquitto/log
      - ./certs:/mosquitto/certs:ro
    ports:
      - "1883:1883"
      - "8883:8883"
    networks:
      - piston-network
    healthcheck:
      test: ["CMD-SHELL", "timeout 5 mosquitto_sub -t '$$SYS/#' -C 1 -i healthcheck -W 3 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Ktor Backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - BUILD_DATE=${BUILD_DATE:-now}
        - VCS_REF=${VCS_REF:-dev}
    image: piston-backend:latest
    container_name: piston-backend
    restart: unless-stopped
    environment:
      DATABASE_URL: jdbc:postgresql://postgres:5432/piston_control
      DATABASE_USER: piston_user
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      MQTT_BROKER: "tcp://mosquitto:1883"
      JWT_SECRET: ${JWT_SECRET}
      JWT_ISSUER: piston-control
      JWT_AUDIENCE: piston-app
      TZ: UTC
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    networks:
      - piston-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: piston-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - piston-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional but recommended)
  redis:
    image: redis:7.2-alpine
    container_name: piston-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - piston-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  piston-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
